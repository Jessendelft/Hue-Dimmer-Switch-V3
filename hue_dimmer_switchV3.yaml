blueprint:
  name: ZHA - Philips Hue Dimmer Switch - V3
  description: "Control lights with a Philips Hue Dimmer Switch.\n\n\
    \ Dim up/down buttons will change the brightness smoothly and can\
    \ be pressed\nand hold until the brightness is satisfactory.\n\nThe bottom \"\
    off\" button will turn the light off.\n\nThe \"on\" and \"off\" buttons can be\
    \ assigned to an action when double\nor triple pressed. This allows you to assign\
    \ e.g. a scene or something else.\n\nThe minimum brightness setting will limit\
    \ how low you can set the brightness. This will \nprevent dimming down until the\
    \ light turns off. Set this to zero to disable this feature.\n\nDoes this blueprint\
    \ not work for you? Did you add your Hue dimmer to ZHA before July 2020?\nIt might\
    \ help to press the 'Reconfigure device' button on the ZHA Device info page.\n\
    The naming of the command attribute in the zha_event was changed back then. \n"
  domain: automation
  input:
    remote:
      name: Philips Hue Dimmer Switch
      description: Pick either RWL020 (US) or RWL021 (EU)
      selector:
        device:
          integration: zha
          manufacturer: Philips
          entity:
            domain: sensor
            device_class: battery
    light:
      name: The light(s) to control
      description: 'The light entity to control (only a single entity is supported;
        use light groups when needed)

        '
      selector:
        entity:
          domain: light
    min_brightness:
      name: Minimum Brightness
      description: 'The minimum brightness of the light(s) when dimming down. Set
        this to zero to disable this feature.

        '
      default: 1
      selector:
        number:
          min: 0.0
          max: 255.0
          mode: slider
          step: 1.0
    button_on_single:
      name: On button - Single press
      description: Action to run when double pressing the on button
      default: []
      selector:
        action: {}
    button_on_double:
      name: On button - Double press
      description: Action to run when double pressing the on button
      default: []
      selector:
        action: {}
    button_on_triple:
      name: On button - Triple press
      description: Action to run when triple pressing the on button
      default: []
      selector:
        action: {}
    button_on_long:
      name: On button - Long press (repeating)
      description: Action to run when holding down the on button
      default: []
      selector:
        action: {}
    button_off_double:
      name: Off button - Double press
      description: Action to run when double pressing the off button
      default: []
      selector:
        action: {}
    button_off_triple:
      name: Off button - Triple press
      description: Action to run when triple pressing the off button
      default: []
      selector:
        action: {}
    button_off_long:
      name: Off button - Long press (repeating)
      description: Action to run when holding down the off button
      default: []
      selector:
        action: {}
mode: restart
max_exceeded: silent
variables:
  light: !input 'light'
  min_brightness: !input 'min_brightness'
trigger:
- platform: event
  event_type: zha_event
  event_data:
    device_id: !input 'remote'
    cluster_id: 64512
action:
- variables:
    command: '{{ trigger.event.data.command }}'
    cur_brightness: '{{ state_attr(light, ''brightness'') | default(0) }}'
    is_turned_on: '{{ states(light) == ''on'' }}'
- choose:
  - conditions: '{{ command == ''on_press'' }}'
    sequence: !input 'button_on_single'
  - conditions: '{{ command == ''on_double_press'' }}'
    sequence: !input 'button_on_double'
  - conditions: '{{ command == ''on_triple_press'' }}'
    sequence: !input 'button_on_triple'
  - conditions: '{{ command == ''on_hold'' }}'
    sequence: !input 'button_on_long'
  - conditions: '{{ command == ''off_press'' }}'
    sequence:
    - service: light.turn_off
      data:
        entity_id: !input 'light'
        transition: 1
  - conditions: '{{ command == ''off_double_press'' }}'
    sequence: !input 'button_off_double'
  - conditions: '{{ command == ''off_triple_press'' }}'
    sequence: !input 'button_off_triple'
  - conditions: '{{ command == ''off_hold'' }}'
    sequence: !input 'button_off_long'
  - conditions: '{{ command == ''up_press'' }}'
    sequence:
    - service: light.turn_on
      data:
        entity_id: !input 'light'
        brightness_step: 25
        transition: 1
  - conditions: '{{ command == ''up_hold'' }}'
    sequence:
    - service: light.turn_on
      data:
        entity_id: !input 'light'
        brightness_step: 50
        transition: 1
  - conditions: '{{ command == ''down_press'' }}'
    sequence:
    - choose:
      - conditions: '{{ (cur_brightness - 25) >= min_brightness }}'
        sequence:
        - service: light.turn_on
          data:
            entity_id: !input 'light'
            transition: 1
            brightness_step: -25
      default:
      - service: light.turn_on
        data:
          entity_id: !input 'light'
          transition: 1
          brightness: !input 'min_brightness'
  - conditions: '{{ command == ''down_hold'' }}'
    sequence:
    - choose:
      - conditions: '{{ (cur_brightness - 50) >= min_brightness }}'
        sequence:
        - service: light.turn_on
          data:
            entity_id: !input 'light'
            transition: 1
            brightness_step: -50
      default:
      - service: light.turn_on
        data:
          entity_id: !input 'light'
          transition: 1
          brightness: !input 'min_brightness'
